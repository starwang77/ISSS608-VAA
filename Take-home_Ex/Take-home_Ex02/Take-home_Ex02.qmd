---
title: "Take-home_Ex02"
author: "WANG XINGYUN"
---

# **Take-home Exercise 2: Be Tradewise or Otherwise**

## **1. Overview**

We try to apply newly acquired techniques to explore and analyze the changing trends and patterns of Singapore’s international trade since 2015.

## **2. Setting the scene**

Download Data,

## 3. Our task

Critique Existing Visualizations

Select three visualizations from the provided webpage.

Analyze and comment on their pros and cons (strengths and weaknesses).

Provide sketches of redesigned versions (make-over) to improve the visualizations.

Create Improved Visualizations

Use ggplot2 and other appropriate R packages.

Implement the make-over versions of the three visualizations with improved design and clarity.

Time-Series Analysis or Forecasting

Analyze the data using time-series analysis or time-series forecasting techniques.

Support the analysis with appropriate visualizations and relevant R packages.

## 4. Getting started

### 4.1 load package

For this exercise, we load the following R packages using the `pacman::p_load()` function, R packages including: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.

```{r}
pacman::p_load(scales, viridis, lubridate, ggthemes,
               gridExtra, readxl, knitr, data.table,
               CGPfunctions, ggHoriPlot, tidyverse)
```

we can download 3 files (M451491, M451501, M451511) from the website (download [Merchandise Trade by Region/Market](https://www.singstat.gov.sg/find-data/search-by-theme/trade-and-investment/merchandise-trade/latest-data) from [Department of Statistics Singapore, DOS](https://www.singstat.gov.sg/)), and the 3 files represent different data, as shown below

M451491-Merchandise Trade By Region and Selected Market (Imports), Monthly

M451501-Merchandise Trade By Region and Selected Market (Domestic Exports),Monthly

M451511-Merchandise Trade By Region and Selected Market (Re-Exports), Monthly

### 4.2 Import data

```{r}
df_Im <- read_csv("data/M451491.csv", skip = 10, show_col_types = FALSE)
head(df_Im)
```

```{r}
df_DE <- read_csv("data/M451501.csv", skip = 10, show_col_types = FALSE)
df_RE <- read_csv("data/M451511.csv", skip = 10, show_col_types = FALSE)
df_commodity <- read_csv("data/M451001.csv", skip = 10, show_col_types = FALSE)
head(df_DE)
head(df_RE)
head(df_commodity)
```

After viewing the whole table, we should change the type of date series.

First column (Data Series): Country/Region Name, Subsequent columns: Monthly data, such as "2025 Jan", "2024 Dec", "2024 Nov", representing trade data for different months.

The column name is in YYYY Mon format (needs to be converted to standard time format YYYY-MM). Data needs to be converted to Long Format for time series analysis.

```{r}
# rename "Data Series" as "Country"
colnames(df_Im)[1] <- "Country"
colnames(df_DE)[1] <- "Country"
colnames(df_RE)[1] <- "Country"

# Extract time column names and convert them to YYYY-MM format
time_cols <- colnames(df_Im)[-1]  
time_cols_cleaned <- format(parse_date_time(time_cols, orders = "ym"), "%Y-%m")

colnames(df_Im)[-1] <- time_cols_cleaned
colnames(df_DE)[-1] <- time_cols_cleaned
colnames(df_RE)[-1] <- time_cols_cleaned

head(df_Im)
```

At present, the data is in Wide Format, and we need to convert it to Long Format for time series analysis:

```{r}
df_Im_long <- df_Im %>%
  pivot_longer(cols = -Country, names_to = "Date", values_to = "Trade_Value")

df_DE_long <- df_DE %>%
  pivot_longer(cols = -Country, names_to = "Date", values_to = "Trade_Value")

df_RE_long <- df_RE %>%
  pivot_longer(cols = -Country, names_to = "Date", values_to = "Trade_Value")


df_Im_long$Date <- as.Date(paste0(df_Im_long$Date, "-01"))  # YYYY-MM-DD
df_DE_long$Date <- as.Date(paste0(df_DE_long$Date, "-01"))
df_RE_long$Date <- as.Date(paste0(df_RE_long$Date, "-01"))

head(df_Im_long)
head(df_DE_long)
head(df_RE_long)
```

Save the cleaned data

```{r}
write_csv(df_Im_long, "data/cleaned_Im.csv")
write_csv(df_DE_long, "data/cleaned_DE.csv")
write_csv(df_RE_long, "data/cleaned_RE.csv")
```

After completing the data cleaning, we began to gradually complete the task.

## 5. Evaluate and design data visualization

#### **5.1 First Data Visualization - MERCHANDISE TRADE PERFORMANCE WITH MAJOR TRADING PARTNERS, 2024**

![](images/clipboard-3932932267.png)

#### Pros:

Intuitively displays the import and export situation of major trading partners. The size of the bubble represents the trade volume, which is clear at a glance. Colors distinguish the proportion of imports and exports for easy comparison.

#### Cons:

Difficulty in accurately comparing bubble sizes.

Large space occupation, unable to display more countries.

Time trend not shown, limited to 2024

#### Improved version: Total trade volume by region/market

first, merge export from the two file

```{r}

df_DE <- read_csv("data/cleaned_DE.csv") 
df_RE <- read_csv("data/cleaned_RE.csv")  


df_DE <- df_DE %>% mutate(Date = as.Date(Date))
df_RE <- df_RE %>% mutate(Date = as.Date(Date))


df_merged_export <- full_join(df_DE, df_RE, by = c("Country", "Date"), suffix = c("_DE", "_RE"))

df_merged_export <- df_merged_export %>%
  mutate(Export_Trade_Value = coalesce(Trade_Value_DE, 0) + coalesce(Trade_Value_RE, 0))


df_merged_export <- df_merged_export %>%
  select(Country, Date, Trade_Value_DE, Trade_Value_RE, Export_Trade_Value)

write_csv(df_merged_export, "data/merged_export.csv")
```

```{r}

df_Im <- read_csv("data/cleaned_Im.csv")
df_merged_export <- read_csv("data/merged_export.csv")


exclude_regions <- c("Total All Markets", "America", "Asia", "Europe", "Oceania", "Africa")
df_Im <- df_Im %>% filter(!Country %in% exclude_regions)
df_merged_export <- df_merged_export %>% filter(!Country %in% exclude_regions)


df_Im <- df_Im %>% mutate(Date = as.Date(Date))
df_merged_export <- df_merged_export %>% mutate(Date = as.Date(Date))


df_Im_2024 <- df_Im %>% filter(format(Date, "%Y") == "2024")
df_merged_export_2024 <- df_merged_export %>% filter(format(Date, "%Y") == "2024")


df_Im_agg <- df_Im_2024 %>% group_by(Country) %>% summarise(Import = sum(Trade_Value, na.rm = TRUE)/1000)
df_merged_export_agg <- df_merged_export_2024 %>% group_by(Country) %>% summarise(Export = sum(Export_Trade_Value, na.rm = TRUE)/1000)


df_total_trade <- left_join(df_Im_agg, df_merged_export_agg, by = "Country") %>%
  mutate(Total_Trade = Import + Export)


top_10_trade_partners <- df_total_trade %>%
  arrange(desc(Total_Trade)) %>%
  slice(1:10)


df_long <- top_10_trade_partners %>%
  select(Country, Import, Export) %>%
  pivot_longer(cols = c("Import", "Export"), names_to = "Trade_Type", values_to = "Value")


ggplot(df_long, aes(x = reorder(Country, -Value), y = Value, fill = Trade_Type)) +
  geom_bar(stat = "identity") +
  
  geom_text(aes(label = round(Value, 1)), position = position_stack(vjust = 0.5), size = 3, color = "white") +
  
  geom_text(data = top_10_trade_partners, 
            aes(x = Country, y = Total_Trade, label = paste0("Total: ", round(Total_Trade, 1))),
            vjust = -0.5, size = 3, fontface = "bold", inherit.aes = FALSE) +

  labs(title = "Singapore's Top 10 Trading Partners (2024)",
       x = "Country",
       y = "Trade Value (S$ Billion)",
       fill = "Trade Type") +
  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
    axis.text.y = element_text(size = 8),
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 8, face = "italic"),
    legend.position = "top",
    legend.title = element_blank()
  )

```

We will create an interactive chart in shinyapp that allows viewers to select a year and see the top 10 trade partners of each year.

[Shinyapp - Click here to view the interactive Shiny app](https://wangxingyun.shinyapps.io/take_home_Ex02/)

#### **5.2 Second Data Visualization**

We need to download the file (M451001)-Merchandise Trade By Commodity Section, (At Current Prices), Monthly

![Strength and weakness:](images/clipboard-1600194320.png)

Strengths:

1.  Clear Category Breakdown – The chart categorizes key commodities and highlights export (orange) and import (blue) values separately for easy comparison.
2.  Helpful Numerical Labels – Each category displays exact trade values and percentages, improving readability.
3.  Simple and Effective Design – The color contrast and "Top 3 Commodity Sections" summary make it visually appealing and easy to interpret.

Weakness:

1.  Export vs. Import Comparison is Misleading – Different scales make the gaps between exports and imports look bigger than they actually are.
2.  No Overall Export vs. Import Ratio – The chart lacks a clear visualization of total exports vs. imports, making it harder to see the overall balance.
3.  No Trend Analysis – It only shows 2024 data, missing past trends that could help understand market changes over time.

#### Improve version

First we have to clean dataset follow the code.

```{r}
library(tidyverse)
library(lubridate)

df_commodity <- read_csv("data/M451001.csv", skip = 10, show_col_types = FALSE)

colnames(df_commodity)[1] <- "Category"


time_cols <- colnames(df_commodity)[-1]


valid_time_cols <- time_cols[!is.na(parse_date_time(time_cols, orders = c("Y b", "b Y")))]
time_cols_cleaned <- format(parse_date_time(valid_time_cols, orders = c("Y b", "b Y")), "%Y-%m")

colnames(df_commodity) <- c("Category", time_cols_cleaned)

columns_to_keep <- c("Category", time_cols_cleaned[year(parse_date_time(time_cols_cleaned, orders = "ym")) >= 2010 & 
                                                    year(parse_date_time(time_cols_cleaned, orders = "ym")) <= 2025])

df_filtered <- df_commodity %>%
  select(all_of(columns_to_keep))

df_import <- df_filtered[19:27, ] %>% mutate(Type = "Import")
df_export <- df_filtered[33:41, ] %>% mutate(Type = "Export")

df_cleaned <- bind_rows(df_import, df_export)

df_long <- df_cleaned %>%
  pivot_longer(cols = -c(Category, Type), names_to = "Date", values_to = "Trade_Value")

print(head(df_long))
write_csv(df_long, "data/cleaned_com.csv")
```

By usig the file - cleaned-com.csv, we will create an interactive chart in shinyapp that allows viewers to select a year and see **Top 10 Trading Partners** and **Non-Oil Merchandise Trade**. We can compare every commodity export and import summary and the trend over years.

-   [Shinyapp - Click here to view the interactive Shiny app](https://wangxingyun.shinyapps.io/take_home_Ex02/)

-   <http://wangxingyun.shinyapps.io/take_home_Ex02>

#### **5.3 Third Data Visualization**

![](images/clipboard-379462836.png)

Strengths:

Clearly displays the annual import and export values.

Different colors for each year make the visualization clear and easy to understand.

Weaknesses:

The 6.6% increase does not specify which year it is being compared to.

The chart lacks a trend showing the changes over previous years.

Improvements:

Create three separate tables:

Import Table: Displays annual import values and indicates whether they increased or decreased compared to the previous year, along with the percentage change.

Export Table: Shows annual export values and their trend.

Total Trade Table: Displays the sum of imports and exports for each year, including the percentage change compared to the previous year.

#### Improved version

```{r}

library(tidyverse)
library(lubridate)


df_Im <- read_csv("data/cleaned_Im.csv", show_col_types = FALSE)
df_merged_export <- read_csv("data/merged_export.csv", show_col_types = FALSE)


df_Im <- df_Im %>% mutate(Date = as.Date(Date))
df_merged_export <- df_merged_export %>% mutate(Date = as.Date(Date))


df_import <- df_Im %>% 
  filter(Country == "Total All Markets") %>%
  select(Date, Import = Trade_Value) %>%
  mutate(Import = round(Import / 1000, 2))  

df_export <- df_merged_export %>%
  filter(Country == "Total All Markets") %>%
  select(Date, Export = Export_Trade_Value) %>%
  mutate(Export = round(Export / 1000, 2))  

df_total_trade <- full_join(df_import, df_export, by = "Date") %>%
  mutate(Total_Trade = Import + Export) %>%
  mutate(Year = year(Date)) %>%
  filter(Year >= 2020 & Year <= 2024) %>%
  group_by(Year) %>%
  summarise(Import = sum(Import, na.rm = TRUE),
            Export = sum(Export, na.rm = TRUE),
            Total_Trade = sum(Total_Trade, na.rm = TRUE)) %>%
  arrange(Year) %>%
  mutate(Import_Change = round((Import - lag(Import)) / lag(Import) * 100, 1),
         Export_Change = round((Export - lag(Export)) / lag(Export) * 100, 1),
         Total_Change = round((Total_Trade - lag(Total_Trade)) / lag(Total_Trade) * 100, 1))


custom_colors <- c("Import" = "#1f77b4", "Export" = "#ff7f0e", "Total Trade" = "#2ca02c")


p1 <- ggplot(df_total_trade, aes(x = factor(Year), y = Import)) +
  geom_bar(stat = "identity", fill = custom_colors["Import"], alpha = 0.7) +
  geom_text(aes(label = sprintf("S$ %.2f B", Import)), vjust = -0.5, size = 5, fontface = "bold") +  
  geom_text(aes(y = Import * 0.98, label = ifelse(!is.na(Import_Change), paste0(Import_Change, "%"), "")), 
            vjust = 1.5, size = 4, color = "red", fontface = "bold") +
  labs(title = "Yearly Import Trend (2020-2024)", x = "Year", y = "Import Value (S$ Billion)") +
  theme_minimal()


p2 <- ggplot(df_total_trade, aes(x = factor(Year), y = Export)) +
  geom_bar(stat = "identity", fill = custom_colors["Export"], alpha = 0.7) +
  geom_text(aes(label = sprintf("S$ %.2f B", Export)), vjust = -0.5, size = 5, fontface = "bold") +  
  geom_text(aes(y = Export * 0.98, label = ifelse(!is.na(Export_Change), paste0(Export_Change, "%"), "")), 
            vjust = 1.5, size = 4, color = "red", fontface = "bold") +
  labs(title = "Yearly Export Trend (2020-2024)", x = "Year", y = "Export Value (S$ Billion)") +
  theme_minimal()

p3 <- ggplot(df_total_trade, aes(x = factor(Year), y = Total_Trade)) +
  geom_bar(stat = "identity", fill = custom_colors["Total Trade"], alpha = 0.7) +
  geom_text(aes(label = sprintf("S$ %.2f B", Total_Trade)), vjust = -0.5, size = 5, fontface = "bold") +  
  geom_text(aes(y = Total_Trade * 0.98, label = ifelse(!is.na(Total_Change), paste0(Total_Change, "%"), "")), 
            vjust = 1.5, size = 4, color = "red", fontface = "bold") +
  labs(title = "Total Trade (Import + Export) Trend (2020-2024)", 
       x = "Year", y = "Total Trade Value (S$ Billion)") +
  theme_minimal()

print(p1)  
print(p2)  
print(p3)  

```

## 6. Time series analysis

We can deal with data set again first, we can observe data over 10 years.

Clean up the data and ensure its format is correct, especially the time column must be of Date type and aggregated by year/month.

```{r}

library(tidyverse)
library(lubridate)


df_Im <- read_csv("data/cleaned_Im.csv", show_col_types = FALSE)
df_merged_export <- read_csv("data/merged_export.csv", show_col_types = FALSE)

df_Im <- df_Im %>% mutate(Date = as.Date(Date), Year = year(Date), Month = month(Date))
df_merged_export <- df_merged_export %>% mutate(Date = as.Date(Date), Year = year(Date), Month = month(Date))



df_import <- df_Im %>% filter(Country == "Total All Markets") %>%
  select(Date, Year, Month, Import = Trade_Value)

df_export <- df_merged_export %>% filter(Country == "Total All Markets") %>%
  select(Date, Year, Month, Export = Export_Trade_Value)


df_total_trade <- full_join(df_import, df_export, by = c("Date", "Year", "Month")) %>%
  mutate(Total_Trade = Import + Export) %>%
  filter(Year >= 2010 & Year <= 2024)  

```

#### Draw Cycle Plot

```{r}
library(ggplot2)

ggplot(df_total_trade, aes(x = Month, y = Total_Trade, group = Year, color = factor(Year))) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  labs(title = "Cycle Plot of Total Trade (2010-2024)",
       x = "Month", y = "Trade Value (S$ Billion)",
       color = "Year") +
  theme_minimal()

```

```{r}

df_slope <- df_total_trade %>%
  filter(Year %in% c(2010, 2024)) %>%
  group_by(Year) %>%
  summarise(Total_Trade = sum(Total_Trade, na.rm = TRUE))  


ggplot(df_slope, aes(x = factor(Year), y = Total_Trade, group = 1)) +
  geom_line(aes(color = "Total Trade"), size = 1) +  
  geom_point(size = 3, color = "red") +  
  geom_text(aes(label = round(Total_Trade, 2)), vjust = -0.5, size = 4, fontface = "bold") +  
  labs(title = "Total Trade Change from 2010 to 2024",
       x = "Year", y = "Trade Value (S$ Billion)",
       color = "Trade Type") +
  theme_minimal() +
  theme(legend.position = "none")  


```

Heatmap

```{r}


ggplot(df_total_trade, aes(x = Month, y = factor(Year), fill = Total_Trade)) +
  geom_tile(color = "white") +
  scale_fill_viridis_c(option = "C", direction = -1) +  
  labs(title = "Trade Value Heatmap (2010-2024)",
       x = "Month", y = "Year",
       fill = "Trade Value (S$ Billion)") +
  theme_minimal()

```

Forecast model

```{r}

library(tidyverse)
library(lubridate)
library(tsibble)
library(fable)


df_total_trade <- df_total_trade %>%
  mutate(Date = yearmonth(Date)) %>%  
  as_tsibble(index = Date) %>%  
  fill_gaps() %>%  
  mutate(Total_Trade = ifelse(is.na(Total_Trade), mean(Total_Trade, na.rm = TRUE), Total_Trade))  


forecast_model <- df_total_trade %>%
  model(ARIMA(Total_Trade))


forecast_result <- forecast_model %>%
  forecast(h = "6 months")


autoplot(forecast_result) +
  labs(title = "Forecast for Total Trade")
```

Observation:
