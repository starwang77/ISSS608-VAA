[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html",
    "title": "Hands-on Exercise 4d",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages.\n\n\n\n\nIn this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\n\n\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\nRows: 267 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): City, District, Sub-district\ndbl (4): Sub-district ID, Positive, Recovered, Death\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 0 are outliers.  Plot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\nWarning: The `xrange` argument deprecated; please use the `x_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\nWarning: The `yrange` argument deprecated; please use the `y_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers. Plot is adjusted for overdispersion.\nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\nWarning: The `xrange` argument deprecated; please use the `x_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\nWarning: The `yrange` argument deprecated; please use the `y_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers. Plot is adjusted for overdispersion.\nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.\n\n\n\n\n\nIn this section, you will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\n\nWarning in geom_point(aes(label = `Sub-district`), alpha = 0.4): Ignoring\nunknown aesthetics: label\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\np\n\n\n\n\n\n\n\n\n\n\n\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly\n\n\n\n\n\n\n\n\n\n\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#overview",
    "title": "Hands-on Exercise 4d",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#installing-and-launching-r-package",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#installing-and-launching-r-package",
    "title": "Hands-on Exercise 4d",
    "section": "",
    "text": "In this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#importing-data",
    "title": "Hands-on Exercise 4d",
    "section": "",
    "text": "In this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\nRows: 267 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): City, District, Sub-district\ndbl (4): Sub-district ID, Positive, Recovered, Death\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#funnelplotr-methods",
    "title": "Hands-on Exercise 4d",
    "section": "",
    "text": "FunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 0 are outliers.  Plot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\nWarning: The `xrange` argument deprecated; please use the `x_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\nWarning: The `yrange` argument deprecated; please use the `y_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers. Plot is adjusted for overdispersion.\nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\nWarning: The `xrange` argument deprecated; please use the `x_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\nWarning: The `yrange` argument deprecated; please use the `y_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers. Plot is adjusted for overdispersion.\nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Hands-on Exercise 4d",
    "section": "",
    "text": "In this section, you will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\n\nWarning in geom_point(aes(label = `Sub-district`), alpha = 0.4): Ignoring\nunknown aesthetics: label\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\np\n\n\n\n\n\n\n\n\n\n\n\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#references",
    "title": "Hands-on Exercise 4d",
    "section": "",
    "text": "funnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html",
    "href": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html",
    "title": "Hands-on Exercise 4b",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters\n\n\n\n\nggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n- To provide alternative statistical inference methods by default. - To follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.ilstu.edu/~jhkahn/apastats.html) gold standard for statistical reporting. For example, here are results from a robust t-test:\n\n\n\n\n\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\n\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n\n\n\n\n\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, you will learn how to visualise model diagnostic and model parameters by using parameters package.\n\nToyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.\n\n\n\n\n\n\n\n\npacman::p_load(readxl, performance, parameters, see)\n\n\n\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\n\n\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\n\nIn the code chunk, check_collinearity() of performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk, check_normality() of performance package.\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\n\n\nplot(check_n)\n\nFor confidence bands, please install `qqplotr`.\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk, check_heteroscedasticity() of performance package.\n\ncheck_h &lt;- check_heteroscedasticity(model1)\n\n\nplot(check_h)\n\n\n\n\n\n\n\n\n\n\n\nWe can also perform the complete by using check_model().\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\n\n\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nplot(parameters(model1))\n\n\n\n\n\n\n\n\n\n\n\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#learning-outcome",
    "title": "Hands-on Exercise 4b",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#visual-statistical-analysis-with-ggstatsplot",
    "href": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#visual-statistical-analysis-with-ggstatsplot",
    "title": "Hands-on Exercise 4b",
    "section": "",
    "text": "ggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n- To provide alternative statistical inference methods by default. - To follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.ilstu.edu/~jhkahn/apastats.html) gold standard for statistical reporting. For example, here are results from a robust t-test:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#getting-started",
    "title": "Hands-on Exercise 4b",
    "section": "",
    "text": "In this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\n\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n\n\n\n\n\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#visualising-models",
    "href": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#visualising-models",
    "title": "Hands-on Exercise 4b",
    "section": "",
    "text": "In this section, you will learn how to visualise model diagnostic and model parameters by using parameters package.\n\nToyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 4b",
    "section": "",
    "text": "pacman::p_load(readxl, performance, parameters, see)\n\n\n\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\n\n\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\n\nIn the code chunk, check_collinearity() of performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk, check_normality() of performance package.\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\n\n\nplot(check_n)\n\nFor confidence bands, please install `qqplotr`.\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk, check_heteroscedasticity() of performance package.\n\ncheck_h &lt;- check_heteroscedasticity(model1)\n\n\nplot(check_h)\n\n\n\n\n\n\n\n\n\n\n\nWe can also perform the complete by using check_model().\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\n\n\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nplot(parameters(model1))\n\n\n\n\n\n\n\n\n\n\n\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html",
    "href": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html",
    "title": "Hands-on Exercise 4a",
    "section": "",
    "text": "Visualizing distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions.\n\n\n\nFor the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\nWarning: `stat(x)` was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(x)` instead.\n\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\n\n\n\n\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\n\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n\n\n\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\n\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\nWarning: The provided binwidth will cause dots to overflow the boundaries of the\ngeometry.\n→ Set `binwidth = NA` to automatically determine a binwidth that ensures dots\n  fit within the bounds,\n→ OR set `overflow = \"compress\"` to automatically reduce the spacing between\n  dots to ensure the dots fit within the bounds,\n→ OR set `overflow = \"keep\"` to allow dots to overflow the bounds of the\n  geometry without producing a warning.\nℹ For more information, see the documentation of the `binwidth` and `overflow`\n  arguments of `?ggdist::geom_dots()` or the section on constraining dot sizes\n  in vignette(\"dotsinterval\") (`vignette(ggdist::dotsinterval)`).\n\n\n\n\n\n\n\n\n\nReference\n\nIntroducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#learning-outcome",
    "title": "Hands-on Exercise 4a",
    "section": "",
    "text": "Visualizing distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#getting-started",
    "title": "Hands-on Exercise 4a",
    "section": "",
    "text": "For the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#visualising-distribution-with-ridgeline-plot",
    "title": "Hands-on Exercise 4a",
    "section": "",
    "text": "Ridgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\nWarning: `stat(x)` was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(x)` instead.\n\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#visualising-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#visualising-distribution-with-raincloud-plot",
    "title": "Hands-on Exercise 4a",
    "section": "",
    "text": "Raincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\n\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n\n\n\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\n\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\nWarning: The provided binwidth will cause dots to overflow the boundaries of the\ngeometry.\n→ Set `binwidth = NA` to automatically determine a binwidth that ensures dots\n  fit within the bounds,\n→ OR set `overflow = \"compress\"` to automatically reduce the spacing between\n  dots to ensure the dots fit within the bounds,\n→ OR set `overflow = \"keep\"` to allow dots to overflow the bounds of the\n  geometry without producing a warning.\nℹ For more information, see the documentation of the `binwidth` and `overflow`\n  arguments of `?ggdist::geom_dots()` or the section on constraining dot sizes\n  in vignette(\"dotsinterval\") (`vignette(ggdist::dotsinterval)`).\n\n\n\n\n\n\n\n\n\nReference\n\nIntroducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html",
    "title": "Hands-on Exercise 4c",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package.\n\n\n\n\n\n\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)\n\n\n\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\nA point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\nIn this section, you will learn how to plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\nThings to learn from the code chunk above\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\n\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\n\nn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning in geom_point(aes(x = RACE, y = mean, text = paste(\"Race:\", RACE, :\nIgnoring unknown aesthetics: text\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\nWarning in layer_slabinterval(data = data, mapping = mapping, stat =\nStatPointinterval, : Ignoring unknown parameters: `.point` and `.interval`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\n\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\nWarning in draw_slabs(self, ...): `fill_type = \"gradient\"` is not supported by the current graphics device.\nℹ Falling back to `fill_type = \"segments\"`.\n→ If you believe your current graphics device does support `fill_type =\n  \"gradient\"` but auto-detection failed, try setting `fill_type = \"gradient\"`\n  explicitly. If this causes the gradient to display correctly, then this\n  warning is likely a false positive caused by the graphics device failing to\n  properly report its support for the `\"LinearGradient\"` pattern via\n  `grDevices::dev.capabilities()`. Consider reporting a bug to the author of\n  the graphics device.\nℹ For more information, see the documentation for `fill_type` in\n  `ggdist::geom_slabinterval()` or the documentation for\n  `ggplot2::check_device()`.\nCaused by warning in `draw_slabs()`:\n! Unable to check the capabilities of the png device.\n\n\n\n\n\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\n\n\n\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\nWARNING: Rtools is required to build R packages, but is not currently installed.\n\nPlease download and install Rtools 4.4 from https://cran.r-project.org/bin/windows/Rtools/.\n\n\nUsing GitHub PAT from the git credential store.\n\n\nSkipping install of 'ungeviz' from a github remote, the SHA1 (d43afb69) has not changed since last install.\n  Use `force = TRUE` to force installation\n\n\n\n\n\n\nlibrary(ungeviz)\n\n\n\n\nNext, the code chunk below will be used to build the HOPs.\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)\n\nWarning in geom_hpline(data = sampler(25, group = RACE), height = 0.6, color =\n\"#D55E00\"): Ignoring unknown parameters: `height`"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#learning-outcome",
    "title": "Hands-on Exercise 4c",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#getting-started",
    "title": "Hands-on Exercise 4c",
    "section": "",
    "text": "For the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)\n\n\n\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands-on Exercise 4c",
    "section": "",
    "text": "A point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\nIn this section, you will learn how to plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\nThings to learn from the code chunk above\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\n\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\n\nn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning in geom_point(aes(x = RACE, y = mean, text = paste(\"Race:\", RACE, :\nIgnoring unknown aesthetics: text"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#visualising-uncertainty-ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#visualising-uncertainty-ggdist-package",
    "title": "Hands-on Exercise 4c",
    "section": "",
    "text": "ggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\nWarning in layer_slabinterval(data = data, mapping = mapping, stat =\nStatPointinterval, : Ignoring unknown parameters: `.point` and `.interval`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\n\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\nWarning in draw_slabs(self, ...): `fill_type = \"gradient\"` is not supported by the current graphics device.\nℹ Falling back to `fill_type = \"segments\"`.\n→ If you believe your current graphics device does support `fill_type =\n  \"gradient\"` but auto-detection failed, try setting `fill_type = \"gradient\"`\n  explicitly. If this causes the gradient to display correctly, then this\n  warning is likely a false positive caused by the graphics device failing to\n  properly report its support for the `\"LinearGradient\"` pattern via\n  `grDevices::dev.capabilities()`. Consider reporting a bug to the author of\n  the graphics device.\nℹ For more information, see the documentation for `fill_type` in\n  `ggdist::geom_slabinterval()` or the documentation for\n  `ggplot2::check_device()`.\nCaused by warning in `draw_slabs()`:\n! Unable to check the capabilities of the png device.\n\n\n\n\n\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Hands-on Exercise 4c",
    "section": "",
    "text": "devtools::install_github(\"wilkelab/ungeviz\")\n\nWARNING: Rtools is required to build R packages, but is not currently installed.\n\nPlease download and install Rtools 4.4 from https://cran.r-project.org/bin/windows/Rtools/.\n\n\nUsing GitHub PAT from the git credential store.\n\n\nSkipping install of 'ungeviz' from a github remote, the SHA1 (d43afb69) has not changed since last install.\n  Use `force = TRUE` to force installation\n\n\n\n\n\n\nlibrary(ungeviz)\n\n\n\n\nNext, the code chunk below will be used to build the HOPs.\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)\n\nWarning in geom_hpline(data = sampler(25, group = RACE), height = 0.6, color =\n\"#D55E00\"): Ignoring unknown parameters: `height`"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "In-calss_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-calss_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class_Ex04",
    "section": "",
    "text": "pacman::p_load(haven, SmartEDA, ggdist, ggridges, ggthemes,\n               colorspace, ggstatsplot, tidyverse)\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nggplot(data = exam_data,\n      aes(x = ENGLISH,\n          y = CLASS)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nchurn_telecom &lt;- read_sas(\"data/churn_telecom.sas7bdat\") %&gt;% \n  mutate(CHURN_FLG = factor(\n    CHURN_FLG,\n    levels = c(\"1\",\"0\"),\n    labels = c(\"churn\", \"Non-Churn\")))\n\n\nggplot(data = churn_telecom,\n       aes(x = CHURN_FLG)) + geom_bar()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class_Ex04",
    "section": "",
    "text": "pacman::p_load(haven, SmartEDA, ggdist, ggridges, ggthemes,\n               colorspace, ggstatsplot, tidyverse)\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nggplot(data = exam_data,\n      aes(x = ENGLISH,\n          y = CLASS)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nchurn_telecom &lt;- read_sas(\"data/churn_telecom.sas7bdat\") %&gt;% \n  mutate(CHURN_FLG = factor(\n    CHURN_FLG,\n    levels = c(\"1\",\"0\"),\n    labels = c(\"churn\", \"Non-Churn\")))\n\n\nggplot(data = churn_telecom,\n       aes(x = CHURN_FLG)) + geom_bar()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "For this exercise, we load the following R packages using the pacman::p_load() function\n\npacman::p_load(tidyverse, haven,\n               ggrepel, ggthemes,\n               ggridges, ggdist,\n               patchwork, scales, corrr)\n\n\n\n\nIn this section, we need to read this data-set\n\ndf &lt;- read.csv(\"data/japan_heart_attack_dataset.csv\")\n\ncheck dataset structure and show the head data\n\nstr(df)\n\n'data.frame':   30000 obs. of  32 variables:\n $ Age                    : int  56 69 46 32 60 25 78 38 56 75 ...\n $ Gender                 : chr  \"Male\" \"Male\" \"Male\" \"Female\" ...\n $ Region                 : chr  \"Urban\" \"Urban\" \"Rural\" \"Urban\" ...\n $ Smoking_History        : chr  \"Yes\" \"No\" \"Yes\" \"No\" ...\n $ Diabetes_History       : chr  \"No\" \"No\" \"No\" \"No\" ...\n $ Hypertension_History   : chr  \"No\" \"No\" \"No\" \"No\" ...\n $ Cholesterol_Level      : num  186 185 211 211 224 ...\n $ Physical_Activity      : chr  \"Moderate\" \"Low\" \"Low\" \"Moderate\" ...\n $ Diet_Quality           : chr  \"Poor\" \"Good\" \"Average\" \"Good\" ...\n $ Alcohol_Consumption    : chr  \"Low\" \"Low\" \"Moderate\" \"High\" ...\n $ Stress_Levels          : num  3.64 3.38 3.81 6.01 6.81 ...\n $ BMI                    : num  34 28.2 27.6 23.7 19.8 ...\n $ Heart_Rate             : num  72.3 57.5 64.7 55.1 76.7 ...\n $ Systolic_BP            : num  124 130 146 132 101 ...\n $ Diastolic_BP           : num  85.7 73.5 72 68.2 92.9 ...\n $ Family_History         : chr  \"No\" \"Yes\" \"No\" \"No\" ...\n $ Heart_Attack_Occurrence: chr  \"No\" \"No\" \"No\" \"No\" ...\n $ Extra_Column_1         : num  0.405 0.0363 0.853 0.3909 0.9336 ...\n $ Extra_Column_2         : num  0.433 0.513 0.22 0.297 0.976 ...\n $ Extra_Column_3         : num  0.629 0.668 0.613 0.156 0.174 ...\n $ Extra_Column_4         : num  0.702 0.116 0.508 0.87 0.295 ...\n $ Extra_Column_5         : num  0.498 0.424 0.901 0.39 0.959 ...\n $ Extra_Column_6         : num  0.0079 0.0839 0.2272 0.4032 0.6898 ...\n $ Extra_Column_7         : num  0.795 0.689 0.496 0.741 0.905 ...\n $ Extra_Column_8         : num  0.291 0.83 0.752 0.224 0.757 ...\n $ Extra_Column_9         : num  0.497 0.634 0.182 0.329 0.338 ...\n $ Extra_Column_10        : num  0.522 0.302 0.629 0.143 0.362 ...\n $ Extra_Column_11        : num  0.7997 0.0437 0.0183 0.9078 0.7286 ...\n $ Extra_Column_12        : num  0.7224 0.4517 0.0632 0.5423 0.1767 ...\n $ Extra_Column_13        : num  0.149 0.879 0.147 0.922 0.485 ...\n $ Extra_Column_14        : num  0.834 0.536 0.997 0.626 0.312 ...\n $ Extra_Column_15        : num  0.0616 0.6178 0.9745 0.2286 0.4528 ...\n\nhead(df)\n\n  Age Gender Region Smoking_History Diabetes_History Hypertension_History\n1  56   Male  Urban             Yes               No                   No\n2  69   Male  Urban              No               No                   No\n3  46   Male  Rural             Yes               No                   No\n4  32 Female  Urban              No               No                   No\n5  60 Female  Rural              No               No                   No\n6  25 Female  Rural              No               No                   No\n  Cholesterol_Level Physical_Activity Diet_Quality Alcohol_Consumption\n1          186.4002          Moderate         Poor                 Low\n2          185.1367               Low         Good                 Low\n3          210.6966               Low      Average            Moderate\n4          211.1655          Moderate         Good                High\n5          223.8143              High         Good                High\n6          220.3400               Low         Good                High\n  Stress_Levels      BMI Heart_Rate Systolic_BP Diastolic_BP Family_History\n1      3.644786 33.96135   72.30153    123.9021     85.68281             No\n2      3.384056 28.24287   57.45764    129.8933     73.52426            Yes\n3      3.810911 27.60121   64.65870    145.6549     71.99481             No\n4      6.014878 23.71729   55.13147    131.7852     68.21133             No\n5      6.806883 19.77158   76.66792    100.6946     92.90249             No\n6      8.207233 20.24744   67.66268    134.5966     73.14970             No\n  Heart_Attack_Occurrence Extra_Column_1 Extra_Column_2 Extra_Column_3\n1                      No     0.40498852      0.4333000      0.6287124\n2                      No     0.03627815      0.5125669      0.6683928\n3                      No     0.85297888      0.2195908      0.6134366\n4                      No     0.39085280      0.2968468      0.1557240\n5                      No     0.93356280      0.9756513      0.1737750\n6                      No     0.52447124      0.2328291      0.5885502\n  Extra_Column_4 Extra_Column_5 Extra_Column_6 Extra_Column_7 Extra_Column_8\n1      0.7016095      0.4981423    0.007901312      0.7945826      0.2907792\n2      0.1155287      0.4238194    0.083932768      0.6889511      0.8301636\n3      0.5080100      0.9006698    0.227205241      0.4963436      0.7521068\n4      0.8702514      0.3903559    0.403181621      0.7414089      0.2239681\n5      0.2953319      0.9594067    0.689787430      0.9045740      0.7570983\n6      0.4169773      0.1703778    0.448359048      0.3690557      0.1958173\n  Extra_Column_9 Extra_Column_10 Extra_Column_11 Extra_Column_12\n1      0.4971931       0.5219945      0.79965663      0.72239788\n2      0.6344903       0.3020434      0.04368285      0.45166789\n3      0.1815012       0.6291803      0.01827617      0.06322702\n4      0.3293139       0.1431905      0.90778075      0.54232201\n5      0.3377609       0.3623747      0.72855208      0.17669914\n6      0.3959485       0.8354301      0.00359574      0.94144789\n  Extra_Column_13 Extra_Column_14 Extra_Column_15\n1       0.1487387       0.8340099     0.061632229\n2       0.8786714       0.5356022     0.617825340\n3       0.1465122       0.9972962     0.974455410\n4       0.9224606       0.6262165     0.228606344\n5       0.4847487       0.3120910     0.452808843\n6       0.8757355       0.7186975     0.008745039\n\n\n\n\n\n\n\n\nThe dataset consists of 30,000 rows and 32 columns.\n\n\n\n\n1️⃣ Demographic Information:\n\nAge (years)\nGender (Male/Female)\nRegion (Geographical location)\n\n2️⃣ Health Conditions:\n\nSmoking_History (History of smoking)\nDiabetes_History (History of diabetes)\nHypertension_History (History of hypertension)\nCholesterol_Level (Cholesterol levels)\nBMI (Body Mass Index)\n\n3️⃣ Lifestyle Factors:\n\nPhysical_Activity (Level of physical activity)\nDiet_Quality (Dietary quality)\nAlcohol_Consumption (Alcohol intake)\n\n4️⃣ Physiological Measurements:\n\nHeart_Rate (Heart rate)\nSystolic_BP (Systolic blood pressure)\nDiastolic_BP (Diastolic blood pressure)\n\n5️⃣ Heart Attack Occurrence:\n\nHeart_Attack_Occurrence (Indicates whether a heart attack occurred)\n\nThis dataset provides a comprehensive view of demographic, health, lifestyle, and physiological factors that may influence heart attack occurrences. The analysis will explore potential correlations and risk factors associated with heart disease.\n\n\n\n\nI found the many columns-“Extra_column” in this dataset, we try to check. We first take a look at the data, and check if there are any duplicate entries.\n\nglimpse(df)\n\nRows: 30,000\nColumns: 32\n$ Age                     &lt;int&gt; 56, 69, 46, 32, 60, 25, 78, 38, 56, 75, 36, 40…\n$ Gender                  &lt;chr&gt; \"Male\", \"Male\", \"Male\", \"Female\", \"Female\", \"F…\n$ Region                  &lt;chr&gt; \"Urban\", \"Urban\", \"Rural\", \"Urban\", \"Rural\", \"…\n$ Smoking_History         &lt;chr&gt; \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"Y…\n$ Diabetes_History        &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n$ Hypertension_History    &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n$ Cholesterol_Level       &lt;dbl&gt; 186.4002, 185.1367, 210.6966, 211.1655, 223.81…\n$ Physical_Activity       &lt;chr&gt; \"Moderate\", \"Low\", \"Low\", \"Moderate\", \"High\", …\n$ Diet_Quality            &lt;chr&gt; \"Poor\", \"Good\", \"Average\", \"Good\", \"Good\", \"Go…\n$ Alcohol_Consumption     &lt;chr&gt; \"Low\", \"Low\", \"Moderate\", \"High\", \"High\", \"Hig…\n$ Stress_Levels           &lt;dbl&gt; 3.644786, 3.384056, 3.810911, 6.014878, 6.8068…\n$ BMI                     &lt;dbl&gt; 33.96135, 28.24287, 27.60121, 23.71729, 19.771…\n$ Heart_Rate              &lt;dbl&gt; 72.30153, 57.45764, 64.65870, 55.13147, 76.667…\n$ Systolic_BP             &lt;dbl&gt; 123.90209, 129.89331, 145.65490, 131.78522, 10…\n$ Diastolic_BP            &lt;dbl&gt; 85.68281, 73.52426, 71.99481, 68.21133, 92.902…\n$ Family_History          &lt;chr&gt; \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No…\n$ Heart_Attack_Occurrence &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n$ Extra_Column_1          &lt;dbl&gt; 0.40498852, 0.03627815, 0.85297888, 0.39085280…\n$ Extra_Column_2          &lt;dbl&gt; 0.43330004, 0.51256694, 0.21959083, 0.29684675…\n$ Extra_Column_3          &lt;dbl&gt; 0.62871236, 0.66839275, 0.61343656, 0.15572404…\n$ Extra_Column_4          &lt;dbl&gt; 0.70160955, 0.11552874, 0.50800995, 0.87025144…\n$ Extra_Column_5          &lt;dbl&gt; 0.49814235, 0.42381938, 0.90066981, 0.39035591…\n$ Extra_Column_6          &lt;dbl&gt; 0.007901312, 0.083932768, 0.227205241, 0.40318…\n$ Extra_Column_7          &lt;dbl&gt; 0.79458257, 0.68895108, 0.49634358, 0.74140891…\n$ Extra_Column_8          &lt;dbl&gt; 0.29077922, 0.83016364, 0.75210679, 0.22396813…\n$ Extra_Column_9          &lt;dbl&gt; 0.49719307, 0.63449028, 0.18150125, 0.32931387…\n$ Extra_Column_10         &lt;dbl&gt; 0.52199452, 0.30204337, 0.62918031, 0.14319054…\n$ Extra_Column_11         &lt;dbl&gt; 0.79965663, 0.04368285, 0.01827617, 0.90778075…\n$ Extra_Column_12         &lt;dbl&gt; 0.72239788, 0.45166789, 0.06322702, 0.54232201…\n$ Extra_Column_13         &lt;dbl&gt; 0.1487387, 0.8786714, 0.1465122, 0.9224606, 0.…\n$ Extra_Column_14         &lt;dbl&gt; 0.8340099, 0.5356022, 0.9972962, 0.6262165, 0.…\n$ Extra_Column_15         &lt;dbl&gt; 0.061632229, 0.617825340, 0.974455410, 0.22860…\n\n\nDisplay only the first few rows after removing the Extra_Column.\n\nhead(df %&gt;% select(-starts_with(\"Extra_Column\")))\n\n  Age Gender Region Smoking_History Diabetes_History Hypertension_History\n1  56   Male  Urban             Yes               No                   No\n2  69   Male  Urban              No               No                   No\n3  46   Male  Rural             Yes               No                   No\n4  32 Female  Urban              No               No                   No\n5  60 Female  Rural              No               No                   No\n6  25 Female  Rural              No               No                   No\n  Cholesterol_Level Physical_Activity Diet_Quality Alcohol_Consumption\n1          186.4002          Moderate         Poor                 Low\n2          185.1367               Low         Good                 Low\n3          210.6966               Low      Average            Moderate\n4          211.1655          Moderate         Good                High\n5          223.8143              High         Good                High\n6          220.3400               Low         Good                High\n  Stress_Levels      BMI Heart_Rate Systolic_BP Diastolic_BP Family_History\n1      3.644786 33.96135   72.30153    123.9021     85.68281             No\n2      3.384056 28.24287   57.45764    129.8933     73.52426            Yes\n3      3.810911 27.60121   64.65870    145.6549     71.99481             No\n4      6.014878 23.71729   55.13147    131.7852     68.21133             No\n5      6.806883 19.77158   76.66792    100.6946     92.90249             No\n6      8.207233 20.24744   67.66268    134.5966     73.14970             No\n  Heart_Attack_Occurrence\n1                      No\n2                      No\n3                      No\n4                      No\n5                      No\n6                      No\n\n\n\n\nUsing the duplicated function, we see that there are no duplicate entries in the data.\n\ndf[duplicated(df),]\n\n [1] Age                     Gender                  Region                 \n [4] Smoking_History         Diabetes_History        Hypertension_History   \n [7] Cholesterol_Level       Physical_Activity       Diet_Quality           \n[10] Alcohol_Consumption     Stress_Levels           BMI                    \n[13] Heart_Rate              Systolic_BP             Diastolic_BP           \n[16] Family_History          Heart_Attack_Occurrence Extra_Column_1         \n[19] Extra_Column_2          Extra_Column_3          Extra_Column_4         \n[22] Extra_Column_5          Extra_Column_6          Extra_Column_7         \n[25] Extra_Column_8          Extra_Column_9          Extra_Column_10        \n[28] Extra_Column_11         Extra_Column_12         Extra_Column_13        \n[31] Extra_Column_14         Extra_Column_15        \n&lt;0 rows&gt; (or 0-length row.names)\n\n\n\n\n\n\ncolSums(is.na(df))\n\n                    Age                  Gender                  Region \n                      0                       0                       0 \n        Smoking_History        Diabetes_History    Hypertension_History \n                      0                       0                       0 \n      Cholesterol_Level       Physical_Activity            Diet_Quality \n                      0                       0                       0 \n    Alcohol_Consumption           Stress_Levels                     BMI \n                      0                       0                       0 \n             Heart_Rate             Systolic_BP            Diastolic_BP \n                      0                       0                       0 \n         Family_History Heart_Attack_Occurrence          Extra_Column_1 \n                      0                       0                       0 \n         Extra_Column_2          Extra_Column_3          Extra_Column_4 \n                      0                       0                       0 \n         Extra_Column_5          Extra_Column_6          Extra_Column_7 \n                      0                       0                       0 \n         Extra_Column_8          Extra_Column_9         Extra_Column_10 \n                      0                       0                       0 \n        Extra_Column_11         Extra_Column_12         Extra_Column_13 \n                      0                       0                       0 \n        Extra_Column_14         Extra_Column_15 \n                      0                       0 \n\n\n✅ No missing values in the data, ready for use.\n✅ No duplicate entries, no need for deduplication.\n✅ Ready for data visualization and analysis.\n\n\n\n\n\nThis stacked histogram visualizes the distribution of heart attack occurrences across different age groups.\nThe x-axis (Age) represents the age of individuals.The y-axis (Count) represents the number of individuals in each age group.\nThe bars are color-coded:Blue (“No”) represents individuals who did not experience a heart attack.Red (“Yes”) represents individuals who experienced a heart attack.\n\nggplot(df, aes(x = Age, fill = Heart_Attack_Occurrence)) +\n  geom_histogram(binwidth = 5, color = \"black\", alpha = 0.7) +\n  theme_minimal() +\n  labs(title = \"Heart Attack Occurrence by Age Distribution\",\n       x = \"Age\",\n       y = \"Count\") +\n  scale_fill_manual(values = c(\"No\" = \"blue\", \"Yes\" = \"red\"))\n\n\n\n\n\n\n\n\n\n\n\nThe dataset has a relatively uniform distribution of individuals across different age groups, except for a slight drop in count near age 80.\nHeart attacks (red section) appear in all age groups, but their proportion increases slightly with age.\nYounger individuals (below 40) have a lower incidence of heart attacks, whereas older individuals (50+) show a higher proportion of heart attack occurrences.\n\nThis visualization effectively highlights the relationship between age and heart attack occurrence, showing a general trend that older individuals are more likely to experience heart attacks.\n\n\n\n\nWe could find there is a relationship between age and heart attack occurrence. So we can try to analysis the different heart attack occurrence from different age group.\nFirstly, we define the age group, then we can calculate the heart attack rate, and finally we attempt to draw a stacked bar chart that allows us to directly observe the relationship between age and heart attack rate.\n\ndf_summary &lt;- df %&gt;%\n  mutate(Age_Group = cut(Age, breaks = c(18, 35, 50, 65, 80), \n                         labels = c(\"18-35\", \"36-50\", \"51-65\", \"66-80\"),\n                         right = FALSE)) %&gt;%\n  group_by(Age_Group, Heart_Attack_Occurrence) %&gt;%\n  summarise(Count = n()) %&gt;%\n  ungroup()\n\n`summarise()` has grouped output by 'Age_Group'. You can override using the\n`.groups` argument.\n\nggplot(df_summary, aes(x = Age_Group, y = Count, fill = Heart_Attack_Occurrence)) +\n  geom_bar(stat = \"identity\", position = position_dodge(width = 0.8)) +  \n  geom_text(aes(label = Count), \n            position = position_dodge(width = 0.8), \n            vjust = -0.5, size = 3) +  \n  theme_minimal() +\n  labs(title = \"Heart Attack Occurrence by Age Group\",\n       x = \"Age Group\",\n       y = \"Count\") +\n  scale_fill_manual(values = c(\"No\" = \"blue\", \"Yes\" = \"red\"))\n\n\n\n\n\n\n\n\n\n\nThe total number of individuals decreases slightly as age increases.\n\n18-35 age group has the highest count (7487 individuals).\n36-50, 51-65, and 66-80 age groups have relatively similar numbers (~6500-6600 individuals).\nThe absolute count of heart attack occurrences (red bars) is relatively stable across all age groups:\n\n18-35: 779 cases\n36-50: 733 cases\n51-65: 740 cases\n66-80: 712 cases\n\n\n\nThe absolute number of heart attacks does not show a significant increase with age.\nHowever, this does not account for population size differences. We need to look at heart attack rates for a better interpretation.\n\n\n\ndf_rate &lt;- df %&gt;%\n  mutate(Age_Group = cut(Age, breaks = c(18, 35, 50, 65, 80), \n                         labels = c(\"18-35\", \"36-50\", \"51-65\", \"66-80\"),\n                         right = FALSE)) %&gt;%\n  group_by(Age_Group) %&gt;%\n  summarise(Heart_Attack_Rate = mean(Heart_Attack_Occurrence == \"Yes\")) %&gt;%\n  ungroup()\n\nggplot(df_rate, aes(x = Age_Group, y = Heart_Attack_Rate, group = 1)) +\n  geom_line(color = \"red\", size = 1) +  \n  geom_point(color = \"red\", size = 3) +  \n  geom_text(aes(label = round(Heart_Attack_Rate, 3)),  \n            vjust = -0.4, size = 3, color = \"black\") +  \n  theme_minimal() +\n  labs(title = \"Heart Attack Rate by Age Group\",\n       x = \"Age Group\",\n       y = \"Heart Attack Rate\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nHeart attack rate is not strictly increasing with age.\n\nThe 18-35 group has the lowest rate (0.094).\nThe rate increases in the 36-50 group (0.101 or 10.1%) and peaks at 51-65 (0.104).\nSurprisingly, the 66-80 group sees a slight decline (0.097) in heart attack rate.\nThe highest heart attack risk is in the 51-65 age group.\n\n\n\n\n✅ Heart attack risk is lowest in the youngest group (18-35) and peaks at 51-65.\n✅ The absolute number of heart attacks remains relatively stable across age groups.\n✅ The oldest group (66-80) shows a slight decrease in heart attack rate, possibly due to survivor bias or better health management.\n\n\n\n\n\ndf_gender_rate &lt;- df %&gt;%\n  group_by(Gender) %&gt;%\n  summarise(Heart_Attack_Rate = mean(Heart_Attack_Occurrence == \"Yes\"))\n\nggplot(df_gender_rate, aes(x = Gender, y = Heart_Attack_Rate, fill = Gender)) +\n  geom_bar(stat = \"identity\") +  \n  geom_text(aes(label = round(Heart_Attack_Rate, 3)), vjust = -0.5) +\n  theme_minimal() +\n  labs(title = \"Heart Attack Rate by Gender\",\n       x = \"Gender\",\n       y = \"Heart Attack Rate\")\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# 计算各地区心脏病发病率\nregion_rate &lt;- df %&gt;%\n  group_by(Region) %&gt;%\n  summarise(Heart_Attack_Rate = mean(Heart_Attack_Occurrence == \"Yes\")) %&gt;%\n  arrange(desc(Heart_Attack_Rate))  # 排序，找出最高和最低的地区\n\n# 绘制条形图\nggplot(region_rate, aes(x = reorder(Region, -Heart_Attack_Rate), y = Heart_Attack_Rate, fill = Region)) +\n  geom_bar(stat = \"identity\") +\n  theme_minimal() +\n  labs(title = \"Heart Attack Rate by Region\",\n       x = \"Region\",\n       y = \"Heart Attack Rate\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nEDA 4 健康状况与心脏病的关系\n\n# 计算健康因素对心脏病的影响（对比“有病史”和“无病史”）\nhealth_factors &lt;- df %&gt;%\n  summarise(\n    Smoking_Yes = mean(Heart_Attack_Occurrence[Smoking_History == \"Yes\"] == \"Yes\"),\n    Smoking_No = mean(Heart_Attack_Occurrence[Smoking_History == \"No\"] == \"Yes\"),\n    \n    Diabetes_Yes = mean(Heart_Attack_Occurrence[Diabetes_History == \"Yes\"] == \"Yes\"),\n    Diabetes_No = mean(Heart_Attack_Occurrence[Diabetes_History == \"No\"] == \"Yes\"),\n    \n    Hypertension_Yes = mean(Heart_Attack_Occurrence[Hypertension_History == \"Yes\"] == \"Yes\"),\n    Hypertension_No = mean(Heart_Attack_Occurrence[Hypertension_History == \"No\"] == \"Yes\")\n  )\n\n# 打印对比结果\nprint(health_factors)\n\n  Smoking_Yes Smoking_No Diabetes_Yes Diabetes_No Hypertension_Yes\n1    0.102034 0.09741466    0.1033295  0.09764465        0.1007513\n  Hypertension_No\n1      0.09815488\n\n\n\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# 转换数据格式，适用于 ggplot\nhealth_factors_long &lt;- health_factors %&gt;%\n  pivot_longer(cols = everything(), names_to = \"Condition\", values_to = \"Heart_Attack_Rate\") %&gt;%\n  separate(Condition, into = c(\"Factor\", \"Group\"), sep = \"_\")\n\n# 绘制分组柱状图\nggplot(health_factors_long, aes(x = Factor, y = Heart_Attack_Rate, fill = Group)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  theme_minimal() +\n  labs(title = \"Heart Attack Rate by Health Condition\",\n       x = \"Health Condition\",\n       y = \"Heart Attack Rate\") +\n  scale_fill_manual(values = c(\"Yes\" = \"red\", \"No\" = \"blue\"))\n\n\n\n\n\n\n\n\n\nggplot(df, aes(x = Heart_Attack_Occurrence, y = Cholesterol_Level, fill = Heart_Attack_Occurrence)) +\n  geom_boxplot() +\n  theme_minimal() +\n  labs(title = \"Cholesterol Level vs Heart Attack Occurrence\",\n       x = \"Heart Attack Occurrence\",\n       y = \"Cholesterol Level\")\n\n\n\n\n\n\n\n\nEDA 生活方式与心脏病的关系\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# 计算生活方式对心脏病的影响（分组对比）\nlifestyle_factors &lt;- df %&gt;%\n  summarise(\n    Physical_Activity_High = mean(Heart_Attack_Occurrence[Physical_Activity == \"High\"] == \"Yes\"),\n    Physical_Activity_Low = mean(Heart_Attack_Occurrence[Physical_Activity == \"Low\"] == \"Yes\"),\n    \n    Diet_Quality_Good = mean(Heart_Attack_Occurrence[Diet_Quality == \"Good\"] == \"Yes\"),\n    Diet_Quality_Poor = mean(Heart_Attack_Occurrence[Diet_Quality == \"Poor\"] == \"Yes\"),\n    \n    Alcohol_High = mean(Heart_Attack_Occurrence[Alcohol_Consumption == \"High\"] == \"Yes\"),\n    Alcohol_Low = mean(Heart_Attack_Occurrence[Alcohol_Consumption == \"Low\"] == \"Yes\")\n  )\n\n# 打印表格结果\nprint(lifestyle_factors)\n\n  Physical_Activity_High Physical_Activity_Low Diet_Quality_Good\n1             0.09866901            0.09449082         0.1008662\n  Diet_Quality_Poor Alcohol_High Alcohol_Low\n1        0.09530134    0.1003775    0.101231"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#getting-started",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "For this exercise, we load the following R packages using the pacman::p_load() function\n\npacman::p_load(tidyverse, haven,\n               ggrepel, ggthemes,\n               ggridges, ggdist,\n               patchwork, scales, corrr)\n\n\n\n\nIn this section, we need to read this data-set\n\ndf &lt;- read.csv(\"data/japan_heart_attack_dataset.csv\")\n\ncheck dataset structure and show the head data\n\nstr(df)\n\n'data.frame':   30000 obs. of  32 variables:\n $ Age                    : int  56 69 46 32 60 25 78 38 56 75 ...\n $ Gender                 : chr  \"Male\" \"Male\" \"Male\" \"Female\" ...\n $ Region                 : chr  \"Urban\" \"Urban\" \"Rural\" \"Urban\" ...\n $ Smoking_History        : chr  \"Yes\" \"No\" \"Yes\" \"No\" ...\n $ Diabetes_History       : chr  \"No\" \"No\" \"No\" \"No\" ...\n $ Hypertension_History   : chr  \"No\" \"No\" \"No\" \"No\" ...\n $ Cholesterol_Level      : num  186 185 211 211 224 ...\n $ Physical_Activity      : chr  \"Moderate\" \"Low\" \"Low\" \"Moderate\" ...\n $ Diet_Quality           : chr  \"Poor\" \"Good\" \"Average\" \"Good\" ...\n $ Alcohol_Consumption    : chr  \"Low\" \"Low\" \"Moderate\" \"High\" ...\n $ Stress_Levels          : num  3.64 3.38 3.81 6.01 6.81 ...\n $ BMI                    : num  34 28.2 27.6 23.7 19.8 ...\n $ Heart_Rate             : num  72.3 57.5 64.7 55.1 76.7 ...\n $ Systolic_BP            : num  124 130 146 132 101 ...\n $ Diastolic_BP           : num  85.7 73.5 72 68.2 92.9 ...\n $ Family_History         : chr  \"No\" \"Yes\" \"No\" \"No\" ...\n $ Heart_Attack_Occurrence: chr  \"No\" \"No\" \"No\" \"No\" ...\n $ Extra_Column_1         : num  0.405 0.0363 0.853 0.3909 0.9336 ...\n $ Extra_Column_2         : num  0.433 0.513 0.22 0.297 0.976 ...\n $ Extra_Column_3         : num  0.629 0.668 0.613 0.156 0.174 ...\n $ Extra_Column_4         : num  0.702 0.116 0.508 0.87 0.295 ...\n $ Extra_Column_5         : num  0.498 0.424 0.901 0.39 0.959 ...\n $ Extra_Column_6         : num  0.0079 0.0839 0.2272 0.4032 0.6898 ...\n $ Extra_Column_7         : num  0.795 0.689 0.496 0.741 0.905 ...\n $ Extra_Column_8         : num  0.291 0.83 0.752 0.224 0.757 ...\n $ Extra_Column_9         : num  0.497 0.634 0.182 0.329 0.338 ...\n $ Extra_Column_10        : num  0.522 0.302 0.629 0.143 0.362 ...\n $ Extra_Column_11        : num  0.7997 0.0437 0.0183 0.9078 0.7286 ...\n $ Extra_Column_12        : num  0.7224 0.4517 0.0632 0.5423 0.1767 ...\n $ Extra_Column_13        : num  0.149 0.879 0.147 0.922 0.485 ...\n $ Extra_Column_14        : num  0.834 0.536 0.997 0.626 0.312 ...\n $ Extra_Column_15        : num  0.0616 0.6178 0.9745 0.2286 0.4528 ...\n\nhead(df)\n\n  Age Gender Region Smoking_History Diabetes_History Hypertension_History\n1  56   Male  Urban             Yes               No                   No\n2  69   Male  Urban              No               No                   No\n3  46   Male  Rural             Yes               No                   No\n4  32 Female  Urban              No               No                   No\n5  60 Female  Rural              No               No                   No\n6  25 Female  Rural              No               No                   No\n  Cholesterol_Level Physical_Activity Diet_Quality Alcohol_Consumption\n1          186.4002          Moderate         Poor                 Low\n2          185.1367               Low         Good                 Low\n3          210.6966               Low      Average            Moderate\n4          211.1655          Moderate         Good                High\n5          223.8143              High         Good                High\n6          220.3400               Low         Good                High\n  Stress_Levels      BMI Heart_Rate Systolic_BP Diastolic_BP Family_History\n1      3.644786 33.96135   72.30153    123.9021     85.68281             No\n2      3.384056 28.24287   57.45764    129.8933     73.52426            Yes\n3      3.810911 27.60121   64.65870    145.6549     71.99481             No\n4      6.014878 23.71729   55.13147    131.7852     68.21133             No\n5      6.806883 19.77158   76.66792    100.6946     92.90249             No\n6      8.207233 20.24744   67.66268    134.5966     73.14970             No\n  Heart_Attack_Occurrence Extra_Column_1 Extra_Column_2 Extra_Column_3\n1                      No     0.40498852      0.4333000      0.6287124\n2                      No     0.03627815      0.5125669      0.6683928\n3                      No     0.85297888      0.2195908      0.6134366\n4                      No     0.39085280      0.2968468      0.1557240\n5                      No     0.93356280      0.9756513      0.1737750\n6                      No     0.52447124      0.2328291      0.5885502\n  Extra_Column_4 Extra_Column_5 Extra_Column_6 Extra_Column_7 Extra_Column_8\n1      0.7016095      0.4981423    0.007901312      0.7945826      0.2907792\n2      0.1155287      0.4238194    0.083932768      0.6889511      0.8301636\n3      0.5080100      0.9006698    0.227205241      0.4963436      0.7521068\n4      0.8702514      0.3903559    0.403181621      0.7414089      0.2239681\n5      0.2953319      0.9594067    0.689787430      0.9045740      0.7570983\n6      0.4169773      0.1703778    0.448359048      0.3690557      0.1958173\n  Extra_Column_9 Extra_Column_10 Extra_Column_11 Extra_Column_12\n1      0.4971931       0.5219945      0.79965663      0.72239788\n2      0.6344903       0.3020434      0.04368285      0.45166789\n3      0.1815012       0.6291803      0.01827617      0.06322702\n4      0.3293139       0.1431905      0.90778075      0.54232201\n5      0.3377609       0.3623747      0.72855208      0.17669914\n6      0.3959485       0.8354301      0.00359574      0.94144789\n  Extra_Column_13 Extra_Column_14 Extra_Column_15\n1       0.1487387       0.8340099     0.061632229\n2       0.8786714       0.5356022     0.617825340\n3       0.1465122       0.9972962     0.974455410\n4       0.9224606       0.6262165     0.228606344\n5       0.4847487       0.3120910     0.452808843\n6       0.8757355       0.7186975     0.008745039\n\n\n\n\n\n\n\n\nThe dataset consists of 30,000 rows and 32 columns.\n\n\n\n\n1️⃣ Demographic Information:\n\nAge (years)\nGender (Male/Female)\nRegion (Geographical location)\n\n2️⃣ Health Conditions:\n\nSmoking_History (History of smoking)\nDiabetes_History (History of diabetes)\nHypertension_History (History of hypertension)\nCholesterol_Level (Cholesterol levels)\nBMI (Body Mass Index)\n\n3️⃣ Lifestyle Factors:\n\nPhysical_Activity (Level of physical activity)\nDiet_Quality (Dietary quality)\nAlcohol_Consumption (Alcohol intake)\n\n4️⃣ Physiological Measurements:\n\nHeart_Rate (Heart rate)\nSystolic_BP (Systolic blood pressure)\nDiastolic_BP (Diastolic blood pressure)\n\n5️⃣ Heart Attack Occurrence:\n\nHeart_Attack_Occurrence (Indicates whether a heart attack occurred)\n\nThis dataset provides a comprehensive view of demographic, health, lifestyle, and physiological factors that may influence heart attack occurrences. The analysis will explore potential correlations and risk factors associated with heart disease.\n\n\n\n\nI found the many columns-“Extra_column” in this dataset, we try to check. We first take a look at the data, and check if there are any duplicate entries.\n\nglimpse(df)\n\nRows: 30,000\nColumns: 32\n$ Age                     &lt;int&gt; 56, 69, 46, 32, 60, 25, 78, 38, 56, 75, 36, 40…\n$ Gender                  &lt;chr&gt; \"Male\", \"Male\", \"Male\", \"Female\", \"Female\", \"F…\n$ Region                  &lt;chr&gt; \"Urban\", \"Urban\", \"Rural\", \"Urban\", \"Rural\", \"…\n$ Smoking_History         &lt;chr&gt; \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"Y…\n$ Diabetes_History        &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n$ Hypertension_History    &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n$ Cholesterol_Level       &lt;dbl&gt; 186.4002, 185.1367, 210.6966, 211.1655, 223.81…\n$ Physical_Activity       &lt;chr&gt; \"Moderate\", \"Low\", \"Low\", \"Moderate\", \"High\", …\n$ Diet_Quality            &lt;chr&gt; \"Poor\", \"Good\", \"Average\", \"Good\", \"Good\", \"Go…\n$ Alcohol_Consumption     &lt;chr&gt; \"Low\", \"Low\", \"Moderate\", \"High\", \"High\", \"Hig…\n$ Stress_Levels           &lt;dbl&gt; 3.644786, 3.384056, 3.810911, 6.014878, 6.8068…\n$ BMI                     &lt;dbl&gt; 33.96135, 28.24287, 27.60121, 23.71729, 19.771…\n$ Heart_Rate              &lt;dbl&gt; 72.30153, 57.45764, 64.65870, 55.13147, 76.667…\n$ Systolic_BP             &lt;dbl&gt; 123.90209, 129.89331, 145.65490, 131.78522, 10…\n$ Diastolic_BP            &lt;dbl&gt; 85.68281, 73.52426, 71.99481, 68.21133, 92.902…\n$ Family_History          &lt;chr&gt; \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No…\n$ Heart_Attack_Occurrence &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n$ Extra_Column_1          &lt;dbl&gt; 0.40498852, 0.03627815, 0.85297888, 0.39085280…\n$ Extra_Column_2          &lt;dbl&gt; 0.43330004, 0.51256694, 0.21959083, 0.29684675…\n$ Extra_Column_3          &lt;dbl&gt; 0.62871236, 0.66839275, 0.61343656, 0.15572404…\n$ Extra_Column_4          &lt;dbl&gt; 0.70160955, 0.11552874, 0.50800995, 0.87025144…\n$ Extra_Column_5          &lt;dbl&gt; 0.49814235, 0.42381938, 0.90066981, 0.39035591…\n$ Extra_Column_6          &lt;dbl&gt; 0.007901312, 0.083932768, 0.227205241, 0.40318…\n$ Extra_Column_7          &lt;dbl&gt; 0.79458257, 0.68895108, 0.49634358, 0.74140891…\n$ Extra_Column_8          &lt;dbl&gt; 0.29077922, 0.83016364, 0.75210679, 0.22396813…\n$ Extra_Column_9          &lt;dbl&gt; 0.49719307, 0.63449028, 0.18150125, 0.32931387…\n$ Extra_Column_10         &lt;dbl&gt; 0.52199452, 0.30204337, 0.62918031, 0.14319054…\n$ Extra_Column_11         &lt;dbl&gt; 0.79965663, 0.04368285, 0.01827617, 0.90778075…\n$ Extra_Column_12         &lt;dbl&gt; 0.72239788, 0.45166789, 0.06322702, 0.54232201…\n$ Extra_Column_13         &lt;dbl&gt; 0.1487387, 0.8786714, 0.1465122, 0.9224606, 0.…\n$ Extra_Column_14         &lt;dbl&gt; 0.8340099, 0.5356022, 0.9972962, 0.6262165, 0.…\n$ Extra_Column_15         &lt;dbl&gt; 0.061632229, 0.617825340, 0.974455410, 0.22860…\n\n\nDisplay only the first few rows after removing the Extra_Column.\n\nhead(df %&gt;% select(-starts_with(\"Extra_Column\")))\n\n  Age Gender Region Smoking_History Diabetes_History Hypertension_History\n1  56   Male  Urban             Yes               No                   No\n2  69   Male  Urban              No               No                   No\n3  46   Male  Rural             Yes               No                   No\n4  32 Female  Urban              No               No                   No\n5  60 Female  Rural              No               No                   No\n6  25 Female  Rural              No               No                   No\n  Cholesterol_Level Physical_Activity Diet_Quality Alcohol_Consumption\n1          186.4002          Moderate         Poor                 Low\n2          185.1367               Low         Good                 Low\n3          210.6966               Low      Average            Moderate\n4          211.1655          Moderate         Good                High\n5          223.8143              High         Good                High\n6          220.3400               Low         Good                High\n  Stress_Levels      BMI Heart_Rate Systolic_BP Diastolic_BP Family_History\n1      3.644786 33.96135   72.30153    123.9021     85.68281             No\n2      3.384056 28.24287   57.45764    129.8933     73.52426            Yes\n3      3.810911 27.60121   64.65870    145.6549     71.99481             No\n4      6.014878 23.71729   55.13147    131.7852     68.21133             No\n5      6.806883 19.77158   76.66792    100.6946     92.90249             No\n6      8.207233 20.24744   67.66268    134.5966     73.14970             No\n  Heart_Attack_Occurrence\n1                      No\n2                      No\n3                      No\n4                      No\n5                      No\n6                      No\n\n\n\n\nUsing the duplicated function, we see that there are no duplicate entries in the data.\n\ndf[duplicated(df),]\n\n [1] Age                     Gender                  Region                 \n [4] Smoking_History         Diabetes_History        Hypertension_History   \n [7] Cholesterol_Level       Physical_Activity       Diet_Quality           \n[10] Alcohol_Consumption     Stress_Levels           BMI                    \n[13] Heart_Rate              Systolic_BP             Diastolic_BP           \n[16] Family_History          Heart_Attack_Occurrence Extra_Column_1         \n[19] Extra_Column_2          Extra_Column_3          Extra_Column_4         \n[22] Extra_Column_5          Extra_Column_6          Extra_Column_7         \n[25] Extra_Column_8          Extra_Column_9          Extra_Column_10        \n[28] Extra_Column_11         Extra_Column_12         Extra_Column_13        \n[31] Extra_Column_14         Extra_Column_15        \n&lt;0 rows&gt; (or 0-length row.names)\n\n\n\n\n\n\ncolSums(is.na(df))\n\n                    Age                  Gender                  Region \n                      0                       0                       0 \n        Smoking_History        Diabetes_History    Hypertension_History \n                      0                       0                       0 \n      Cholesterol_Level       Physical_Activity            Diet_Quality \n                      0                       0                       0 \n    Alcohol_Consumption           Stress_Levels                     BMI \n                      0                       0                       0 \n             Heart_Rate             Systolic_BP            Diastolic_BP \n                      0                       0                       0 \n         Family_History Heart_Attack_Occurrence          Extra_Column_1 \n                      0                       0                       0 \n         Extra_Column_2          Extra_Column_3          Extra_Column_4 \n                      0                       0                       0 \n         Extra_Column_5          Extra_Column_6          Extra_Column_7 \n                      0                       0                       0 \n         Extra_Column_8          Extra_Column_9         Extra_Column_10 \n                      0                       0                       0 \n        Extra_Column_11         Extra_Column_12         Extra_Column_13 \n                      0                       0                       0 \n        Extra_Column_14         Extra_Column_15 \n                      0                       0 \n\n\n✅ No missing values in the data, ready for use.\n✅ No duplicate entries, no need for deduplication.\n✅ Ready for data visualization and analysis."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-1",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "年龄分布\n\nggplot(df, aes(x = Age, fill = Heart_Attack_Occurrence)) +\n  geom_histogram(binwidth = 5, color = \"black\", alpha = 0.7) +\n  theme_minimal() +\n  labs(title = \"Heart Attack Occurrence by Age Distribution\",\n       x = \"Age\",\n       y = \"Count\") +\n  scale_fill_manual(values = c(\"No\" = \"blue\", \"Yes\" = \"red\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-1-heart-attack-occurrence-by-age-distribution",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-1-heart-attack-occurrence-by-age-distribution",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "This stacked histogram visualizes the distribution of heart attack occurrences across different age groups.\nThe x-axis (Age) represents the age of individuals.The y-axis (Count) represents the number of individuals in each age group.\nThe bars are color-coded:Blue (“No”) represents individuals who did not experience a heart attack.Red (“Yes”) represents individuals who experienced a heart attack.\n\nggplot(df, aes(x = Age, fill = Heart_Attack_Occurrence)) +\n  geom_histogram(binwidth = 5, color = \"black\", alpha = 0.7) +\n  theme_minimal() +\n  labs(title = \"Heart Attack Occurrence by Age Distribution\",\n       x = \"Age\",\n       y = \"Count\") +\n  scale_fill_manual(values = c(\"No\" = \"blue\", \"Yes\" = \"red\"))\n\n\n\n\n\n\n\n\n\n\n\nThe dataset has a relatively uniform distribution of individuals across different age groups, except for a slight drop in count near age 80.\nHeart attacks (red section) appear in all age groups, but their proportion increases slightly with age.\nYounger individuals (below 40) have a lower incidence of heart attacks, whereas older individuals (50+) show a higher proportion of heart attack occurrences.\n\nThis visualization effectively highlights the relationship between age and heart attack occurrence, showing a general trend that older individuals are more likely to experience heart attacks."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-2-different-age-group-have-different-heart-attack",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-2-different-age-group-have-different-heart-attack",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "We could find there is a relationship between age and heart attack occurrence. So we can try to analysis the different heart attack occurrence from different age group.\nFirstly, we define the age group, then we can calculate the heart attack rate, and finally we attempt to draw a stacked bar chart that allows us to directly observe the relationship between age and heart attack rate.\n\ndf_summary &lt;- df %&gt;%\n  mutate(Age_Group = cut(Age, breaks = c(18, 35, 50, 65, 80), \n                         labels = c(\"18-35\", \"36-50\", \"51-65\", \"66-80\"),\n                         right = FALSE)) %&gt;%\n  group_by(Age_Group, Heart_Attack_Occurrence) %&gt;%\n  summarise(Count = n()) %&gt;%\n  ungroup()\n\n`summarise()` has grouped output by 'Age_Group'. You can override using the\n`.groups` argument.\n\nggplot(df_summary, aes(x = Age_Group, y = Count, fill = Heart_Attack_Occurrence)) +\n  geom_bar(stat = \"identity\", position = position_dodge(width = 0.8)) +  \n  geom_text(aes(label = Count), \n            position = position_dodge(width = 0.8), \n            vjust = -0.5, size = 3) +  \n  theme_minimal() +\n  labs(title = \"Heart Attack Occurrence by Age Group\",\n       x = \"Age Group\",\n       y = \"Count\") +\n  scale_fill_manual(values = c(\"No\" = \"blue\", \"Yes\" = \"red\"))\n\n\n\n\n\n\n\n\n\n#| label: heart_attack_rate\n#| fig-cap: \"Heart Attack Rate by Age Group\"\n#| code-fold: show\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\ndf_rate &lt;- df %&gt;%\n  mutate(Age_Group = cut(Age, breaks = c(18, 35, 50, 65, 80), \n                         labels = c(\"18-35\", \"36-50\", \"51-65\", \"66-80\"),\n                         right = FALSE)) %&gt;%\n  group_by(Age_Group) %&gt;%\n  summarise(Heart_Attack_Rate = mean(Heart_Attack_Occurrence == \"Yes\")) %&gt;%\n  ungroup()\n\nggplot(df_rate, aes(x = Age_Group, y = Heart_Attack_Rate, group = 1)) +\n  geom_line(color = \"red\", size = 1) +  \n  geom_point(color = \"red\", size = 3) +  \n  geom_text(aes(label = round(Heart_Attack_Rate, 3)),  \n            vjust = -0.4, size = 3, color = \"black\") +  \n  theme_minimal() +\n  labs(title = \"Heart Attack Rate by Age Group\",\n       x = \"Age Group\",\n       y = \"Heart Attack Rate\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-2-性别与心脏病发作的关系",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-2-性别与心脏病发作的关系",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "ggplot(df, aes(x = Gender, fill = Heart_Attack_Occurrence)) +\n  geom_bar(position = \"fill\") +\n  theme_minimal() +\n  labs(title = \"Heart Attack Occurrence by Gender\",\n       x = \"Gender\",\n       y = \"Proportion\") +\n  scale_fill_manual(values = c(\"No\" = \"blue\", \"Yes\" = \"red\"))\n\n\n\n\n\n\n\n\n胆固醇水平与心脏病的关系\n\nggplot(df, aes(x = Heart_Attack_Occurrence, y = Cholesterol_Level, fill = Heart_Attack_Occurrence)) +\n  geom_boxplot() +\n  theme_minimal() +\n  labs(title = \"Cholesterol Level vs. Heart Attack Occurrence\",\n       x = \"Heart Attack Occurrence\",\n       y = \"Cholesterol Level\") +\n  scale_fill_manual(values = c(\"No\" = \"blue\", \"Yes\" = \"red\"))\n\n\n\n\n\n\n\n\n1\n\n# 选择数值变量进行相关性分析\nnumeric_df &lt;- df %&gt;% select(Age, Cholesterol_Level, BMI, Systolic_BP, Diastolic_BP, Heart_Rate)\n\n# 计算相关性矩阵\ncor_matrix &lt;- cor(numeric_df, use = \"complete.obs\")\n\n# 绘制相关性热图\nlibrary(ggcorrplot)\nggcorrplot(cor_matrix, lab = TRUE, colors = c(\"blue\", \"white\", \"red\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-2-heart-attack-occurrence-by-age-group",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-2-heart-attack-occurrence-by-age-group",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "We could find there is a relationship between age and heart attack occurrence. So we can try to analysis the different heart attack occurrence from different age group.\nFirstly, we define the age group, then we can calculate the heart attack rate, and finally we attempt to draw a stacked bar chart that allows us to directly observe the relationship between age and heart attack rate.\n\ndf_summary &lt;- df %&gt;%\n  mutate(Age_Group = cut(Age, breaks = c(18, 35, 50, 65, 80), \n                         labels = c(\"18-35\", \"36-50\", \"51-65\", \"66-80\"),\n                         right = FALSE)) %&gt;%\n  group_by(Age_Group, Heart_Attack_Occurrence) %&gt;%\n  summarise(Count = n()) %&gt;%\n  ungroup()\n\n`summarise()` has grouped output by 'Age_Group'. You can override using the\n`.groups` argument.\n\nggplot(df_summary, aes(x = Age_Group, y = Count, fill = Heart_Attack_Occurrence)) +\n  geom_bar(stat = \"identity\", position = position_dodge(width = 0.8)) +  \n  geom_text(aes(label = Count), \n            position = position_dodge(width = 0.8), \n            vjust = -0.5, size = 3) +  \n  theme_minimal() +\n  labs(title = \"Heart Attack Occurrence by Age Group\",\n       x = \"Age Group\",\n       y = \"Count\") +\n  scale_fill_manual(values = c(\"No\" = \"blue\", \"Yes\" = \"red\"))\n\n\n\n\n\n\n\n\n\n\nThe total number of individuals decreases slightly as age increases.\n\n18-35 age group has the highest count (7487 individuals).\n36-50, 51-65, and 66-80 age groups have relatively similar numbers (~6500-6600 individuals).\nThe absolute count of heart attack occurrences (red bars) is relatively stable across all age groups:\n\n18-35: 779 cases\n36-50: 733 cases\n51-65: 740 cases\n66-80: 712 cases\n\n\n\nThe absolute number of heart attacks does not show a significant increase with age.\nHowever, this does not account for population size differences. We need to look at heart attack rates for a better interpretation.\n\n\n\ndf_rate &lt;- df %&gt;%\n  mutate(Age_Group = cut(Age, breaks = c(18, 35, 50, 65, 80), \n                         labels = c(\"18-35\", \"36-50\", \"51-65\", \"66-80\"),\n                         right = FALSE)) %&gt;%\n  group_by(Age_Group) %&gt;%\n  summarise(Heart_Attack_Rate = mean(Heart_Attack_Occurrence == \"Yes\")) %&gt;%\n  ungroup()\n\nggplot(df_rate, aes(x = Age_Group, y = Heart_Attack_Rate, group = 1)) +\n  geom_line(color = \"red\", size = 1) +  \n  geom_point(color = \"red\", size = 3) +  \n  geom_text(aes(label = round(Heart_Attack_Rate, 3)),  \n            vjust = -0.4, size = 3, color = \"black\") +  \n  theme_minimal() +\n  labs(title = \"Heart Attack Rate by Age Group\",\n       x = \"Age Group\",\n       y = \"Heart Attack Rate\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nHeart attack rate is not strictly increasing with age.\n\nThe 18-35 group has the lowest rate (0.094).\nThe rate increases in the 36-50 group (0.101 or 10.1%) and peaks at 51-65 (0.104).\nSurprisingly, the 66-80 group sees a slight decline (0.097) in heart attack rate.\nThe highest heart attack risk is in the 51-65 age group.\n\n\n\n\n✅ Heart attack risk is lowest in the youngest group (18-35) and peaks at 51-65.\n✅ The absolute number of heart attacks remains relatively stable across age groups.\n✅ The oldest group (66-80) shows a slight decrease in heart attack rate, possibly due to survivor bias or better health management."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-2-the-relationship-between-gender-and-heart-attack",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-2-the-relationship-between-gender-and-heart-attack",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "df_gender_rate &lt;- df %&gt;%\n  group_by(Gender) %&gt;%\n  summarise(Heart_Attack_Rate = mean(Heart_Attack_Occurrence == \"Yes\"))\n\nggplot(df_gender_rate, aes(x = Gender, y = Heart_Attack_Rate, fill = Gender)) +\n  geom_bar(stat = \"identity\") +  \n  geom_text(aes(label = round(Heart_Attack_Rate, 3)), vjust = -0.5) +\n  theme_minimal() +\n  labs(title = \"Heart Attack Rate by Gender\",\n       x = \"Gender\",\n       y = \"Heart Attack Rate\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda3-calculate-the-incidence-rate-of-heart-disease-in-different-regions",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda3-calculate-the-incidence-rate-of-heart-disease-in-different-regions",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "library(dplyr)\nlibrary(ggplot2)\n\n# 计算各地区心脏病发病率\nregion_rate &lt;- df %&gt;%\n  group_by(Region) %&gt;%\n  summarise(Heart_Attack_Rate = mean(Heart_Attack_Occurrence == \"Yes\")) %&gt;%\n  arrange(desc(Heart_Attack_Rate))  # 排序，找出最高和最低的地区\n\n# 绘制条形图\nggplot(region_rate, aes(x = reorder(Region, -Heart_Attack_Rate), y = Heart_Attack_Rate, fill = Region)) +\n  geom_bar(stat = \"identity\") +\n  theme_minimal() +\n  labs(title = \"Heart Attack Rate by Region\",\n       x = \"Region\",\n       y = \"Heart Attack Rate\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nEDA 4 健康状况与心脏病的关系\n\n# 计算健康因素对心脏病的影响（对比“有病史”和“无病史”）\nhealth_factors &lt;- df %&gt;%\n  summarise(\n    Smoking_Yes = mean(Heart_Attack_Occurrence[Smoking_History == \"Yes\"] == \"Yes\"),\n    Smoking_No = mean(Heart_Attack_Occurrence[Smoking_History == \"No\"] == \"Yes\"),\n    \n    Diabetes_Yes = mean(Heart_Attack_Occurrence[Diabetes_History == \"Yes\"] == \"Yes\"),\n    Diabetes_No = mean(Heart_Attack_Occurrence[Diabetes_History == \"No\"] == \"Yes\"),\n    \n    Hypertension_Yes = mean(Heart_Attack_Occurrence[Hypertension_History == \"Yes\"] == \"Yes\"),\n    Hypertension_No = mean(Heart_Attack_Occurrence[Hypertension_History == \"No\"] == \"Yes\")\n  )\n\n# 打印对比结果\nprint(health_factors)\n\n  Smoking_Yes Smoking_No Diabetes_Yes Diabetes_No Hypertension_Yes\n1    0.102034 0.09741466    0.1033295  0.09764465        0.1007513\n  Hypertension_No\n1      0.09815488\n\n\n\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# 转换数据格式，适用于 ggplot\nhealth_factors_long &lt;- health_factors %&gt;%\n  pivot_longer(cols = everything(), names_to = \"Condition\", values_to = \"Heart_Attack_Rate\") %&gt;%\n  separate(Condition, into = c(\"Factor\", \"Group\"), sep = \"_\")\n\n# 绘制分组柱状图\nggplot(health_factors_long, aes(x = Factor, y = Heart_Attack_Rate, fill = Group)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  theme_minimal() +\n  labs(title = \"Heart Attack Rate by Health Condition\",\n       x = \"Health Condition\",\n       y = \"Heart Attack Rate\") +\n  scale_fill_manual(values = c(\"Yes\" = \"red\", \"No\" = \"blue\"))\n\n\n\n\n\n\n\n\n\nggplot(df, aes(x = Heart_Attack_Occurrence, y = Cholesterol_Level, fill = Heart_Attack_Occurrence)) +\n  geom_boxplot() +\n  theme_minimal() +\n  labs(title = \"Cholesterol Level vs Heart Attack Occurrence\",\n       x = \"Heart Attack Occurrence\",\n       y = \"Cholesterol Level\")\n\n\n\n\n\n\n\n\nEDA 生活方式与心脏病的关系\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# 计算生活方式对心脏病的影响（分组对比）\nlifestyle_factors &lt;- df %&gt;%\n  summarise(\n    Physical_Activity_High = mean(Heart_Attack_Occurrence[Physical_Activity == \"High\"] == \"Yes\"),\n    Physical_Activity_Low = mean(Heart_Attack_Occurrence[Physical_Activity == \"Low\"] == \"Yes\"),\n    \n    Diet_Quality_Good = mean(Heart_Attack_Occurrence[Diet_Quality == \"Good\"] == \"Yes\"),\n    Diet_Quality_Poor = mean(Heart_Attack_Occurrence[Diet_Quality == \"Poor\"] == \"Yes\"),\n    \n    Alcohol_High = mean(Heart_Attack_Occurrence[Alcohol_Consumption == \"High\"] == \"Yes\"),\n    Alcohol_Low = mean(Heart_Attack_Occurrence[Alcohol_Consumption == \"Low\"] == \"Yes\")\n  )\n\n# 打印表格结果\nprint(lifestyle_factors)\n\n  Physical_Activity_High Physical_Activity_Low Diet_Quality_Good\n1             0.09866901            0.09449082         0.1008662\n  Diet_Quality_Poor Alcohol_High Alcohol_Low\n1        0.09530134    0.1003775    0.101231"
  }
]